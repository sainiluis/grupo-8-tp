package lyc.compiler;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.*;
import lyc.compiler.symbol_table.*;
import lyc.compiler.asm.*;
import lyc.compiler.gci.*;
import lyc.compiler.model.*;
import lyc.compiler.files.*;


import java.util.Stack;


class Parser;

action code
{:
    public SymbolTableManager symbolTableManager = new SymbolTableManager();
    
    public ArrayList<Simbolo> listaSimbolos = new ArrayList<>();
    
    public ArrayList<Terceto> listaTercetos = new ArrayList<>();
    public IntermediateCodeGenerator intermediateCode = new IntermediateCodeGenerator(listaTercetos);
    public TercetosHandler tercetosHandler = new TercetosHandler();
    public int cantidadElementos = 0;
    public int index = 0;
    public int indexTerceto = 1;
    public String op_relacional = "";
    public int terceto_salto = 0;

    public Stack<String> factorStack = new Stack<>();

    public Stack<String> conditionsStack = new Stack<>();

    public Stack<Integer> numerosDeTercetosStack = new Stack<>();
    public Stack<Integer> finDeSentenceListStack = new Stack<>();

    public int nro_label = 1;

    public boolean isIfElse = false;
    public boolean isIf = false;

    public int tercetoConditional;

    public boolean isWhile = false;
    
    public String montoDescuento;
    public int indiceDescuento;

    public int cont_cantidad_variables;

    public boolean flagOneSentence = false;

    List<String> elementosDesapilados = new ArrayList<>();

    public int lastCondition;

    public AsmHandler asmHandler = new AsmHandler(symbolTableManager.getSymbolTable(), tercetosHandler.getIntermediateCode());

:}

parser code
{:
    public ArrayList<Simbolo> getSymbolTable() {
        return action_obj.symbolTableManager.getSymbolTable();
    }

    public ArrayList<Terceto> getIntermediateCode() {
        return action_obj.tercetosHandler.getIntermediateCode();
    }

    public ArrayList<String> getAsmInstructions() {
        return action_obj.asmHandler.getAsmInstructions();
    }
    
:}

// Terminals
terminal IF;
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal NEWLINE;
terminal GREATERTHAN;
terminal LESSTHAN;
terminal GREATEREQUAL;
terminal LESSEQUAL;
terminal EQUALS;
terminal NOTEQUALS;
terminal ELSE;
terminal LLAVEA;
terminal LLAVEC;
terminal DOSPUNTOS;
terminal COMA;
terminal INIT;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal WHILE;
terminal OR;
terminal AND;
terminal NOT;
terminal WRITE;
terminal READ;
terminal UNTIL_LOOP;
terminal APLICAR_DESC;
terminal CORCHETE_A;
terminal CORCHETE_C;

// Non Terminals
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal program;
non terminal sentence_list;
non terminal if_statement;
non terminal condition;
non terminal relational_op;
non terminal if;
non terminal conditional;
non terminal declarations;
non terminal declaration;
non terminal variable_names;
non terminal name;
non terminal initi;
non terminal type;
non terminal name_init;
non terminal until_loop_condition;
non terminal until_loop_operation;
non terminal discount_amount;
non terminal discount_list;
non terminal discount_values;
non terminal discount_index;

start with program;

program ::= sentence_list
{: 

    System.out.println("End"); 

    asmHandler.generateAssembler();
:};


sentence_list ::= sentence_list sentence
{:
    if(isIf) {
        
        int nroTercetoDesapilado = numerosDeTercetosStack.pop();
        action_obj.tercetosHandler.saltarAlTercetoDesapilado(nroTercetoDesapilado, indexTerceto);
        isIf = false;
    }

    if(isIfElse) {
        
        int tercetoDesapilado = numerosDeTercetosStack.pop();
        int finDelElse = finDeSentenceListStack.pop();
        int finDelThen = finDeSentenceListStack.pop();
        action_obj.tercetosHandler.crearNuevoTerceto(finDelThen-1, "BI", "[" + Integer.toString(finDelElse+1) + "]", "_" );
        indexTerceto++;
        action_obj.tercetosHandler.saltarAlTercetoDesapilado(tercetoDesapilado, finDelThen+1);
        isIfElse = false;
    }

    if(isWhile){
        int tercetoDesapilado = numerosDeTercetosStack.pop();
        action_obj.tercetosHandler.saltarAlTercetoDesapilado(tercetoDesapilado, indexTerceto);
        isWhile = false;
    }

    finDeSentenceListStack.push(indexTerceto);

:};

sentence_list ::=
sentence
{:
    if(isIfElse) {

        int tercetoDesapilado = numerosDeTercetosStack.pop();
        int finDelElse = finDeSentenceListStack.pop();
        int finDelThen = finDeSentenceListStack.pop();
        action_obj.tercetosHandler.crearNuevoTerceto(finDelThen-1, "BI", "[" + Integer.toString(finDelElse+1) + "]", "_" );
        indexTerceto++;
        action_obj.tercetosHandler.saltarAlTercetoDesapilado(tercetoDesapilado, finDelThen+1);
        isIfElse = false;
    }
   
    
    if(isIf) {
        
        int nroTercetoDesapilado = numerosDeTercetosStack.pop();
        action_obj.tercetosHandler.saltarAlTercetoDesapilado(nroTercetoDesapilado, indexTerceto);
        isIf = false;
    }

    if(isWhile){
        int tercetoDesapilado = numerosDeTercetosStack.pop();
        action_obj.tercetosHandler.saltarAlTercetoDesapilado(tercetoDesapilado, indexTerceto);
        isIfElse = false;
    }

    finDeSentenceListStack.push(indexTerceto);

    
:};

sentence ::= assignment;



assignment ::= IDENTIFIER:id ASSIG expression:e
{: 

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, id.toString(), "_" , "_"));
    indexTerceto++;

    // Validación de que los tipos de dos variables de una asignación sean iguales
    String elemento_expression = action_obj.tercetosHandler.getOperadorPorIndice(action_obj.tercetosHandler.obtenerIndice("expression"));

    if(action_obj.symbolTableManager.containsSymbol(elemento_expression)){

        String tipoDatoElementoIzquierda = action_obj.symbolTableManager.getTipoDeSimbolo(id.toString());
        String tipoDatoElementoDerecha = action_obj.symbolTableManager.getTipoDeSimbolo(elemento_expression);


        if(!tipoDatoElementoIzquierda.equals(tipoDatoElementoDerecha)) {
            throw new RuntimeException("Error en una asignacion. La variable '" + id.toString() + "' es de tipo " + tipoDatoElementoIzquierda + " mientras que la variable " + elemento_expression + " es de tipo " + tipoDatoElementoDerecha + ". Asegurese de que los tipos de datos de las variables en una asignacion, sean iguales." );
        }
    }

    
    // Validación de que los tipos de una variable y una constante de una asignación sean iguales

    elemento_expression = action_obj.tercetosHandler.getOperadorPorIndice(action_obj.tercetosHandler.obtenerIndice("expression"));

    if(action_obj.symbolTableManager.containsSymbol("_"+ elemento_expression)){

        String tipoDatoElementoIzquierda = action_obj.symbolTableManager.getTipoDeSimbolo(id.toString());
        String tipoDatoElementoDerecha = action_obj.symbolTableManager.getTipoDeSimbolo("_" + elemento_expression);

        if(!tipoDatoElementoIzquierda.equals(tipoDatoElementoDerecha)) {
           throw new RuntimeException("Error en una asignacion. La variable '" + id.toString() + "' es de tipo " + tipoDatoElementoIzquierda + " mientras que la constante '" + elemento_expression + "' es de tipo " + tipoDatoElementoDerecha + ". Asegurese de que el tipo de dato de la variable y de la constante en esta asignación, sean iguales." );
        }
    }



    // Verificamos si esta variable está inicializada
    if (!action_obj.symbolTableManager.containsSymbol(id.toString())) {
        throw new RuntimeException("La variable '" + id.toString() + "' no esta inicializada.");
    }

    System.out.println("Assignment"); 
    System.out.println("Id al cual se asigna: " + id);

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, ":=", id.toString(), "terceto_" + Integer.toString(action_obj.tercetosHandler.obtenerIndice("expression"))));
    action_obj.tercetosHandler.agregarIndice("assignment", indexTerceto);
    indexTerceto++;
    
:};


expression ::= expression PLUS term 
{: 
    System.out.println("+");

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "+", "terceto_" + Integer.toString(action_obj.tercetosHandler.obtenerIndice("expression")), "terceto_" + Integer.toString(action_obj.tercetosHandler.obtenerIndice("term"))));
    action_obj.tercetosHandler.agregarIndice("expression", indexTerceto);
    indexTerceto++;
    
:};

expression ::= expression SUB term 
{: 
    System.out.println("-");

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "-", Integer.toString(action_obj.tercetosHandler.obtenerIndice("expression")), Integer.toString(action_obj.tercetosHandler.obtenerIndice("term"))));
    action_obj.tercetosHandler.agregarIndice("expression", indexTerceto);
    indexTerceto++;
:};

expression ::= term 
{: 
    System.out.println("Expression = Term");

    action_obj.tercetosHandler.apuntarAOtroIndice("expression", "term");

:};

term ::= term MULT factor 
{: 
    System.out.println("*");

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "*", "[" + Integer.toString(action_obj.tercetosHandler.obtenerIndice("term")) + "]", "[" + Integer.toString(action_obj.tercetosHandler.obtenerIndice("factor")) + "]"));
    action_obj.tercetosHandler.agregarIndice("term", indexTerceto);
    indexTerceto++;
:};

term ::= term DIV factor 
{: 
    System.out.println("/");

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "/", "[" + Integer.toString(action_obj.tercetosHandler.obtenerIndice("term")) + "]", "[" + Integer.toString(action_obj.tercetosHandler.obtenerIndice("factor")) + "]"));
    action_obj.tercetosHandler.agregarIndice("term", indexTerceto);
    indexTerceto++;

:};
term ::= factor 
{: 
    System.out.println("Term = factor");

    action_obj.tercetosHandler.apuntarAOtroIndice("term", "factor");
:};

factor ::= IDENTIFIER:id  
{: 

    // Verificamos si esta variable está inicializada
    if (!action_obj.symbolTableManager.containsSymbol(id.toString())) {
        throw new RuntimeException("La variable '" + id.toString() + "' no esta inicializada.");
    }


    System.out.println("Id: " + id);

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, id.toString(), "_","_"));

    action_obj.tercetosHandler.agregarIndice("factor", indexTerceto);

    indexTerceto++;

    // apilo, luego me servirá si debo usar este elemento en alguna condicion
    factorStack.push(id.toString());
:};

factor ::= FLOAT_CONSTANT:constant 
{: 
    System.out.println("Float Constant: " + constant ); 
    Simbolo symbol = new Simbolo("_" + constant.toString(), "Float", constant.toString(), constant.toString().length());
    
    if (!action_obj.symbolTableManager.containsSymbol(symbol.getNombre())) {
        action_obj.symbolTableManager.addSymbol(symbol);
    }

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, constant.toString(), "_","_"));

    action_obj.tercetosHandler.agregarIndice("factor", indexTerceto);

    indexTerceto++;

    // apilo, luego me servirá si debo usar este elemento en alguna condicion
    factorStack.push(constant.toString());


:};


factor ::= INTEGER_CONSTANT:constant 
{: 
    System.out.println("Int Constant: " + constant ); 
    Simbolo symbol = new Simbolo("_" + constant.toString(), "Int", constant.toString(), constant.toString().length());
    
    if (!action_obj.symbolTableManager.containsSymbol(symbol.getNombre())) {
        action_obj.symbolTableManager.addSymbol(symbol);
    }


    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, constant.toString(), "_","_"));

    action_obj.tercetosHandler.agregarIndice("factor", indexTerceto);

    indexTerceto++;

    // apilo, luego me servirá si debo usar este elemento en alguna condicion
    factorStack.push(constant.toString());

:};

factor ::= STRING_CONSTANT:constant 
{: 
    System.out.println("String Constant: " + constant ); 
    Simbolo symbol = new Simbolo("_" + constant.toString(), "String", constant.toString(), constant.toString().length());
    
    if (!action_obj.symbolTableManager.containsSymbol(symbol.getNombre())) {
        action_obj.symbolTableManager.addSymbol(symbol);
    }


    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, constant.toString(), "_","_"));

    action_obj.tercetosHandler.agregarIndice("factor", indexTerceto);
    indexTerceto++;

    // apilo, luego me servirá si debo usar este elemento en alguna condicion
    factorStack.push(constant.toString());

:};





factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};

sentence ::= IF conditional LLAVEA sentence_list LLAVEC
{: 
    System.out.println("If");
    isIf = true;
:};

sentence ::= IF conditional LLAVEA sentence_list LLAVEC ELSE LLAVEA sentence_list LLAVEC
{: 
    System.out.println("If - Else");
    isIfElse = true;


:};



conditional ::= OPEN_BRACKET condition CLOSE_BRACKET
{: 

    System.out.println("conditional");
:}
| OPEN_BRACKET NOT condition CLOSE_BRACKET
{: 
    System.out.println("conditional NOT"); 
    
:};

conditional ::= OPEN_BRACKET condition AND condition CLOSE_BRACKET
{: 
    System.out.println("condition with AND");
    
:}
| OPEN_BRACKET condition OR condition CLOSE_BRACKET
{:

    System.out.println("condition with OR");
:};


condition ::= factor relational_op factor{: 

    String factorDerecha = factorStack.pop();
    String factorIzquierda = factorStack.pop();

    // Verifico que ambos factores saean del mismo tipo

    String tipoDeSimboloFactorIzquierda = action_obj.symbolTableManager.getTipoDeSimbolo(factorIzquierda);

    if (action_obj.symbolTableManager.getTipoDeSimbolo(factorIzquierda) == null) {
        tipoDeSimboloFactorIzquierda = action_obj.symbolTableManager.getTipoDeSimbolo("_" + factorIzquierda);
    }

    String tipoDeSimboloFactorDerecha = action_obj.symbolTableManager.getTipoDeSimbolo(factorDerecha);

    if (action_obj.symbolTableManager.getTipoDeSimbolo(factorDerecha) == null) {
        tipoDeSimboloFactorDerecha = action_obj.symbolTableManager.getTipoDeSimbolo("_" + factorDerecha);
    }

    System.out.println("CONDITION");
    System.out.println(tipoDeSimboloFactorIzquierda);
    System.out.println(factorIzquierda);
    System.out.println(tipoDeSimboloFactorDerecha);
    System.out.println(factorDerecha);

    if(!tipoDeSimboloFactorIzquierda.equals(tipoDeSimboloFactorDerecha)) {
        throw new RuntimeException("Error en una condicion. El factor izquierdo '" + factorIzquierda + "' es de tipo " + tipoDeSimboloFactorIzquierda + " mientras que el factor derecho '" + factorDerecha + "' es de tipo " + tipoDeSimboloFactorDerecha + ". Asegurese de que el tipo de datos de ambos factores sean iguales." );
    }

    String operador_contrario = "";

    lastCondition = indexTerceto;

    tercetoConditional = indexTerceto;

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "CMP", factorIzquierda, factorDerecha));
    
    indexTerceto++;

    switch (op_relacional) {
        case ">":
            operador_contrario = "BLE";
            break; 
        case "<":
            operador_contrario = "BGE";
            break; 
        case ">=":
            operador_contrario = "BLT";
            break; 
        case "<=":
            operador_contrario = "BGT";
            break; 
        case "==":
            operador_contrario = "BNE";
            break; 
        case "!=":
            operador_contrario = "BEQ";
            break; 
    }

    // Guardo el numero de terceto para luego volver y poner el nro de terceto al cual debe saltar
    numerosDeTercetosStack.push(indexTerceto);
    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, operador_contrario, "_", "_"));
    indexTerceto++;
    
:};

relational_op ::= 
GREATERTHAN
{: 
    System.out.println("Operador relacional mayor");
    op_relacional = ">";
:}
| LESSTHAN
{: 
    System.out.println("Operador relacional menor");
    op_relacional = "<"; 
:}
| GREATEREQUAL
{: 
    System.out.println("Operador relacional mayor o igual");
    op_relacional = ">="; 
:}
| LESSEQUAL
{: 
    System.out.println("Operador relacional menor o igual"); 
    op_relacional = "<=";
:}
| EQUALS
{: 
    System.out.println("Operador relacional igual");
    op_relacional = "=";
:}
| NOTEQUALS
{: 
    System.out.println("Operador relacional no igual"); 
    op_relacional = "!=";
:};

sentence ::= initi 
{: 
    // valido si hay más de un elemento con el mismo nombre.
    if (action_obj.symbolTableManager.haySimbolosDuplicados()) {
        throw new RuntimeException("Hay variables declaradas en el bloque init() con el mismo nombre");
    }

    System.out.println("Se inicializaron las variables"); 
    
:};

initi ::= INIT LLAVEA declarations LLAVEC;

declarations ::= declarations declaration;
declarations ::= declaration;

declaration ::= variable_names DOSPUNTOS type;

variable_names ::= variable_names COMA name_init;
variable_names ::= name_init;

name_init ::= IDENTIFIER:id
{: 
    Simbolo symbol = new Simbolo(id.toString(), "", "", 0);
    this.listaSimbolos.add(symbol);

    System.out.println("Se inicializo la variable: " + id.toString());
:};


name ::= IDENTIFIER:id
{: 

     // Verificamos si esta variable está inicializada
    if (!action_obj.symbolTableManager.containsSymbol(id.toString())) {
        throw new RuntimeException("La variable '" + id.toString() + "' no esta inicializada.");
    }

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, id.toString(), "_" , "_"));

    indexTerceto++;

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "READ", id.toString() , "_"));
    action_obj.tercetosHandler.agregarIndice("sentence", indexTerceto);
    indexTerceto++;

:};

type ::= 
FLOAT
{: 
    System.out.println("Se inicializaron todos los datos tipo Float");
    action_obj.symbolTableManager.addVariablesFromArrayList(this.listaSimbolos, "Float");
    action_obj.tercetosHandler.agregarIndice("type", indexTerceto);
    action_obj.tercetosHandler.agregarTipoDeVariableInit("float");
:}
| INT
{: 
    System.out.println("Se inicializaron todos los datos tipo Int");
    action_obj.symbolTableManager.addVariablesFromArrayList(this.listaSimbolos, "Int");
    action_obj.tercetosHandler.agregarIndice("type", indexTerceto);
    action_obj.tercetosHandler.agregarTipoDeVariableInit("int");
:}
| STRING
{: 
    System.out.println("Se inicializaron todos los datos tipo String");
    action_obj.symbolTableManager.addVariablesFromArrayList(this.listaSimbolos, "String");
    action_obj.tercetosHandler.agregarIndice("type", indexTerceto);
    action_obj.tercetosHandler.agregarTipoDeVariableInit("string");
:};

sentence ::= WHILE conditional LLAVEA sentence_list LLAVEC
{: 
    System.out.println("Bucle While");
    
    isWhile = true;

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "BI", "[" + tercetoConditional + "]", "_"));
    indexTerceto++;
:};

sentence ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET
{: 
    

    // Verificamos si esta variable está inicializada
    if (!action_obj.symbolTableManager.containsSymbol(id.toString())) {
        throw new RuntimeException("La variable '" + id.toString() + "' no esta inicializada.");
    }

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, id.toString(), "_" , "_"));

    indexTerceto++;

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "READ", id.toString() , "_"));
    action_obj.tercetosHandler.agregarIndice("sentence", indexTerceto);
    indexTerceto++;

    System.out.println("Funcion Leer");

   
:};

sentence ::= WRITE OPEN_BRACKET name CLOSE_BRACKET
{: 
    System.out.println("Funcion Escribir");
:}
| WRITE OPEN_BRACKET STRING_CONSTANT:sc CLOSE_BRACKET
{: 

    System.out.println("String Constant: " + sc.toString() ); 
    Simbolo symbol = new Simbolo("_" + sc.toString(), "String", sc.toString(), sc.toString().length());
    
    if (!action_obj.symbolTableManager.containsSymbol(symbol.getNombre())) {
        action_obj.symbolTableManager.addSymbol(symbol);
    }


    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, sc.toString(), "_","_"));
    indexTerceto++;

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,"WRITE" , sc.toString(),"_"));
    indexTerceto++;

    // apilo, luego me servirá si debo usar este elemento en alguna condicion
    factorStack.push(sc.toString());

    System.out.println("Funcion Escribir");
:};


sentence ::= UNTIL_LOOP OPEN_BRACKET until_loop_condition COMA until_loop_operation CLOSE_BRACKET
{: 

    isWhile = true;

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "BI", "[" + tercetoConditional + "]", "_"));
    indexTerceto++;

    System.out.println("Funcion Until Loop");
:};

until_loop_condition ::= condition;

until_loop_operation ::= IDENTIFIER:var EQUALS expression:op;

sentence ::= APLICAR_DESC OPEN_BRACKET discount_amount COMA discount_list COMA discount_index CLOSE_BRACKET
{: 

        // Verificamos que la lista no esté vacía
    if (this.cantidadElementos == 0) {
        System.out.println("Error: la lista de elementos a aplicar descuento está vacía." );
        throw new RuntimeException("Lista de elementos vacia");
    }

    // Con la siguiente logica podemos ver si el indice de la funcion descuento es valido.
    if (this.index >  this.cantidadElementos) {
        System.out.println("Error: El indice " + index + " es mayor que la cantidad de elementos en la lista de descuentos ("+ this.cantidadElementos + " elementos)." );
        throw new RuntimeException("Indice fuera de rango");
    }


    System.out.println("Cantidad de elementos de la lista: " + this.cantidadElementos);
    System.out.println("Indice funcion aplicar descuento: " + this.index);


    this.cantidadElementos = 0;
    this.index = 0;

    while (!factorStack.isEmpty()) {
        String elemento = factorStack.pop();
        if (elemento.equals("--")) {
            break;
        } else {
            elementosDesapilados.add(0, elemento);
        }
    }

    int cantidad_elementos = 0;

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,":=" , "@cont","0"));
    indexTerceto++;

    Simbolo symbol = new Simbolo("@cont", "Float", "" , 4);
    
    if (!action_obj.symbolTableManager.containsSymbol(symbol.getNombre())) {
        action_obj.symbolTableManager.addSymbol(symbol);
    }

    for (String elemento : elementosDesapilados) {
        cantidad_elementos++;
        
        action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,":=" , "@cont","@cont + 1"));
        indexTerceto++;
        System.out.println("Elemento desapilado nro "+ Integer.toString(cantidad_elementos) + " " + elemento);
        
        action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,":=", "@var"+ Integer.toString(cantidad_elementos) , "terceto_" + elemento));
        indexTerceto++;

        symbol = new Simbolo("@var"+ Integer.toString(cantidad_elementos), "Float", "" , 4);
    
        if (!action_obj.symbolTableManager.containsSymbol(symbol.getNombre())) {
            action_obj.symbolTableManager.addSymbol(symbol);
        }

        action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,"CMP", "@cont" ,"@indice"));
        indexTerceto++;

        action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,"BGE", "[" + Integer.toString(indexTerceto+4) + "]" , "_"));
        indexTerceto++;

        action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,"-", "@var"+ Integer.toString(cantidad_elementos) , "@montoDesc"));
        indexTerceto++;
        
        action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,":=", "@resultadoValor"+ Integer.toString(cantidad_elementos) , "terceto_" + Integer.toString(indexTerceto-1)));
        indexTerceto++;

        symbol = new Simbolo("@resultadoValor"+ Integer.toString(cantidad_elementos), "Float", "" , 4);
    
        if (!action_obj.symbolTableManager.containsSymbol(symbol.getNombre())) {
            action_obj.symbolTableManager.addSymbol(symbol);
        }

        action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,"BI", "[" + Integer.toString(indexTerceto+5) + "]" , "_"));
        indexTerceto++;

        action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,"*", "@var"+ Integer.toString(cantidad_elementos) , "@auxDesc"));
        indexTerceto++;

        action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,":=", "@resultadoValor"+ Integer.toString(cantidad_elementos) , "terceto_" + Integer.toString(indexTerceto-1)));
        indexTerceto++;

    }

    System.out.println("Funcion AplcarDescuento");
:};

discount_amount ::= INTEGER_CONSTANT:c
{: 
    montoDescuento = c.toString();
    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,":=", "@montoDesc", montoDescuento));
    action_obj.tercetosHandler.agregarIndice("discount_amount", indexTerceto);
    indexTerceto++;

    Simbolo symbol = new Simbolo("@montoDesc", "Float", "" , 4);

    if (!action_obj.symbolTableManager.containsSymbol(symbol.getNombre())) {
        action_obj.symbolTableManager.addSymbol(symbol);
    }

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "/", "@montoDesc" , "100"));
    indexTerceto++;
    

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "-", "1" , "terceto_" + Integer.toString(indexTerceto-1)));
    indexTerceto++;

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, ":=", "@auxDesc" , "terceto_" + Integer.toString(indexTerceto-1)));
    indexTerceto++;

    symbol = new Simbolo("@auxDesc", "Float", "" , 4);

    if (!action_obj.symbolTableManager.containsSymbol(symbol.getNombre())) {
        action_obj.symbolTableManager.addSymbol(symbol);
    }

    factorStack.push("--");
:}
| FLOAT_CONSTANT:c
{:
     montoDescuento = c.toString();
    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,":=", "@montoDesc",montoDescuento));
    action_obj.tercetosHandler.agregarIndice("discount_amount", indexTerceto);
    indexTerceto++;

    Simbolo symbol = new Simbolo("@montoDesc", "Float", "" , 4);

    if (!action_obj.symbolTableManager.containsSymbol(symbol.getNombre())) {
        action_obj.symbolTableManager.addSymbol(symbol);
    }

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "/", "@montoDesc" , "100"));
    indexTerceto++;
    

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, "-", "1" , "terceto_" + Integer.toString(indexTerceto-1)));
    indexTerceto++;

    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto, ":=", "@auxDesc" , "terceto_" + Integer.toString(indexTerceto-1)));
    indexTerceto++;

    symbol = new Simbolo("@auxDesc", "Float", "" , 4);

    if (!action_obj.symbolTableManager.containsSymbol(symbol.getNombre())) {
        action_obj.symbolTableManager.addSymbol(symbol);
    }

    factorStack.push("--");
:};

discount_list ::= CORCHETE_A discount_values CORCHETE_C;

discount_values ::= 
factor
{:
    this.cantidadElementos = this.cantidadElementos + 1;
:}
| factor COMA discount_values
{: 
    this.cantidadElementos = this.cantidadElementos + 1;
:}
| //regla para cuando la lista viene vacia.

;

discount_index ::= INTEGER_CONSTANT:index
{:
    indiceDescuento = Integer.parseInt(index.toString());

    this.index = Integer.parseInt(index.toString());
    action_obj.tercetosHandler.agregarTerceto(new Terceto(indexTerceto,":=","@indice",index.toString()));
    action_obj.tercetosHandler.agregarIndice("discount_index", indexTerceto);
    indexTerceto++;

    Simbolo symbol = new Simbolo("@indice", "Float", "" , 4);

    if (!action_obj.symbolTableManager.containsSymbol(symbol.getNombre())) {
        action_obj.symbolTableManager.addSymbol(symbol);
    }
:}
;
